---
import { Item } from "@gw2-ui/components";
import { fractalHeaders } from "src/utils/cache";
import imageFetch from "src/utils/imageFetch";
import Grid from "../Grid.astro";
import GridItem from "../GridItem.astro";
import { Heading } from "../TableOfContents.astro";
import TextDivider from "../TextDivider.astro";
import Attribute from "../gw2-ui/Attribute.astro";
import Table from "../html-components/table.astro";
import Tbody from "../html-components/tbody.astro";
import Td from "../html-components/td.astro";
import Th from "../html-components/th.astro";
import Tr from "../html-components/tr.astro";
import Map from "../map/Map.astro";
import Header from "./Header.astro";
import SectionsToggle from "@components/sections/SectionsToggle.astro";

export interface Props {
  title: string;
  cycle: string;
  sigils: { id: number }[];
  potions: { id: number }[];
  description: string;
  date: string;
  difficulties: { level: number; ar: number }[];
  image: string;
  long_description: string;
  headings: Heading[];
}

const {
  title,
  cycle,
  sigils,
  potions,
  description,
  date,
  difficulties,
  image,
  long_description,
  headings,
} = Astro.props;

const headerImage =
  "../" + (await imageFetch(Object.keys(fractalHeaders), Astro.url.pathname));

const hasChallengeMode = difficulties.some((d) => d.level >= 97);
---

<Header
  title={title}
  description={description}
  date={date}
  image={headerImage}
/>

{
  hasChallengeMode && (
    <SectionsToggle
      labels={["Normal Mode", "Challenge Mode"]}
      dataTags={["normalmode", "challengemode"]}
      tooltipTexts={["Show only normal mode", "Show only challenge mode"]}
      class="mb-4"
    />
  )
}

{long_description && <p class="mb-4">{long_description}</p>}

<TextDivider text="Details" />

<section class="mb-4">
  <Grid>
    <GridItem>
      <Table>
        <Tbody>
          <Tr>
            <Th>Difficulties</Th>
            <Td>
              {
                difficulties.map((d) => (
                  <>
                    Level {d.level}
                    {d.ar > 0 && (
                      <>
                        -{" "}
                        <Attribute
                          name="Agony Resistance"
                          text={d.ar + " Agony Resistance"}
                        />
                      </>
                    )}
                    <br />
                  </>
                ))
              }
            </Td>
          </Tr>
          <Tr>
            <Th>Cycle</Th>
            <Td>{cycle}</Td>
          </Tr>

          {
            potions ? (
              <Tr>
                <Th>Potions</Th>
                <Td>
                  <ul>
                    {potions.map((p) => (
                      <li>
                        <Item client:visible id={p.id} />
                      </li>
                    ))}
                  </ul>
                </Td>
              </Tr>
            ) : null
          }

          {
            sigils ? (
              <Tr>
                <Th>Sigils</Th>
                <Td>
                  <ul>
                    {sigils.map((s) => (
                      <li>
                        <Item client:visible id={s.id} />
                      </li>
                    ))}
                  </ul>
                </Td>
              </Tr>
            ) : null
          }
        </Tbody>
      </Table>
    </GridItem>
    <GridItem>
      <div class="md:flex md:flex-row-reverse">
        <Map
          type={title.toLowerCase().replaceAll(" ", "-")}
          headings={headings}
        />
      </div>
    </GridItem>
  </Grid>
</section>

<TextDivider text="Guide" />
