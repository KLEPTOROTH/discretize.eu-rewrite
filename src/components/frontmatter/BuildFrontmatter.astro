---
import { EliteSpecTypes, ProfessionTypes } from "@gw2-ui/data/professions";
import { Icon } from "astro-icon";
import Card from "../Card.astro";
import GifPlayer from "../GifPlayer.astro";
import TextDivider from "../TextDivider.astro";
import Boon from "../gw2-ui/Boon.astro";
import Condition from "../gw2-ui/Condition.astro";
import Profession from "../gw2-ui/Profession.astro";
import Li from "../html-components/li.astro";
import Ul from "../html-components/ul.astro";
import { ConditionTypes } from "@gw2-ui/data/conditions";
import { BoonsTypes } from "@gw2-ui/data/boons";

export interface Props {
  title: string;
  specialization: EliteSpecTypes;
  role: string;
  hasBeginner: boolean;
  date: string;
  hidden?: boolean;
  rating: string;
  profession: ProfessionTypes;
  boons: {
    name: BoonsTypes;
    uptime: string;
    variant: string;
  }[];
  conditions: {
    name: ConditionTypes;
    uptime: string;
  }[];
  code: string;
  cmGuide?: string;
  uptodate?: {
    guide?: boolean;
    gear?: boolean;
  };
  headerVideoId?: string;
}

const {
  title,
  specialization,
  role,
  hasBeginner,
  profession,
  date,
  boons,
  rating,
  cmGuide,
  conditions,
  uptodate: { guide = true, gear = true } = {},
  headerVideoId,
} = Astro.props;
---

<script>
  // get nanostore
  import { isBeginner } from "../../state/beginner";

  const urlSearchParams = new URLSearchParams(window.location.search);

  let initialState = true;
  if (urlSearchParams.get("variant") === "advanced") {
    isBeginner.set(false);
    initialState = false;
  }

  const switchElement = document.querySelector<HTMLInputElement>(
    "[id='switchBeginner']"
  );
  if (switchElement) {
    switchElement.checked = !initialState;
    switchElement.addEventListener("change", (e: Event) => {
      const newState: boolean = (e.target as HTMLInputElement).checked;

      window.history.replaceState(
        {},
        "",
        `${window.location.pathname}?variant=${
          newState ? "advanced" : "beginner"
        }`
      );
      isBeginner.set(!newState);
    });
  }
</script>

{
  headerVideoId && (
    <div class="relative h-full mx-[-1.4rem] mt-[-1.393rem] mb-4 max-xl:hidden max-[1439px]:mt-[-1rem] max-[1439px]:mx-[-1rem]">
      <video muted autoplay loop width="1440" height="810">
        <source src={`/${headerVideoId}`} type="video/mp4" />
      </video>

      <div
        class={`transform absolute top-0 left-0 max-w-full h-[105px] flex justify-between flex-col items-start px-4 text-neutral-800 rounded-br`}
        style={{
          backgroundColor:
            "var(--gw2-color-" + profession.toLowerCase() + "-main)",
        }}
      >
        <div class="flex flex-grow">
          <Profession
            disableLink
            disableText
            name={specialization}
            size="gigantic"
            className="self-center"
          />
          <div class="ml-4 self-center">
            <h1 class="mb-0 font-bold">{title}</h1>
            <div class="text-lg">{rating}</div>
          </div>
        </div>
      </div>

      <div
        class={`flex absolute bottom-0 left-0 px-4 pt-4 rounded-tl-md flex-col`}
      >
        {boons && (
          <Card>
            <div class="text-xs font-bold m-auto text-center">Boons</div>
            <Ul className="list-none !m-0 !pl-0">
              {boons.map(({ name }) => (
                <Li>
                  <Boon name={name} />
                </Li>
              ))}
            </Ul>
          </Card>
        )}
        {conditions && (
          <Card>
            <div class="text-xs font-bold m-auto text-center">Conditions</div>
            <Ul className="list-none !m-0 !pl-0">
              {conditions.map(({ name }) => (
                <Li>
                  <Condition name={name} />
                </Li>
              ))}
            </Ul>
          </Card>
        )}
      </div>

      <div
        class="absolute top-0 right-0 p-1 text-sm bg-blue-600 text-neutral-800 rounded-bl"
        style={{
          backgroundColor:
            "var(--gw2-color-" + profession.toLowerCase() + "-main)",
        }}
      >
        <ul>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:calendar" height="0.8rem" /> last updated on{" "}
            {new Date(date.trim()).toDateString()}
          </li>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:account" height="0.8rem" /> Gear:{" "}
            {!gear ? "not" : ""} up-to-date
          </li>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:television-guide" height="0.8rem" /> Guide:{" "}
            {!guide ? "not" : ""}
            up-to-date
          </li>
        </ul>
      </div>
    </div>
  )
}
<div class={`flex max-md:flex-col ${headerVideoId ? "xl:hidden" : ""}`.trim()}>
  <div class="flex flex-grow">
    <Profession
      disableLink
      disableText
      name={specialization}
      size="gigantic"
      className="self-center"
    />
    <div class="ml-4 self-center">
      <h1 class="mb-0 font-bold">{title}</h1>
      <div class="text-lg">{rating}</div>
    </div>
  </div>
  <ul>
    <li class="flex gap-1 items-center">
      <Icon name="mdi:calendar" height="0.8rem" /> last updated on{" "}
      {new Date(date.trim()).toDateString()}
    </li>
    <li class="flex gap-1 items-center">
      <Icon name="mdi:account" height="0.8rem" /> Gear: {!gear ? "not" : ""}{
        " "
      }
      up-to-date
    </li>
    <li class="flex gap-1 items-center">
      <Icon name="mdi:television-guide" height="0.8rem" /> Guide:{" "}
      {!guide ? "not" : ""}
      up-to-date
    </li>
  </ul>
</div>

<div class="flex items-center mb-4">
  {
    cmGuide && (
      <button class="btn btn-primary ">
        <a href={cmGuide} target="_blank" rel="noopener noreferrer">
          CM Guide
        </a>
      </button>
    )
  }

  {
    hasBeginner && (
      <div class="form-control">
        <label class="label cursor-pointer">
          <span class="label-text mr-4">Advanced mode</span>
          <input
            id="switchBeginner"
            type="checkbox"
            class="checkbox"
            aria-label="Switch between Beginner and Advanced"
          />
        </label>
      </div>
    )
  }
</div>
<TextDivider text="Overview" />
