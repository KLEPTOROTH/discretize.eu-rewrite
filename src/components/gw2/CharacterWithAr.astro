---
import "discretize-ui/react-discretize-components/src/styles/defaultTheme.css";
import Peepoptimizer from "./peepoptimizer/Peepoptimizer";

interface Character {
  title: string;
  id: string;
}

interface Props {
  characters: string[];
}

const id = Math.random().toString(16).slice(2);
const { characters } = Astro.props as Props;

// enrich data with escaped ids
const enrichedCharacters: Character[] = characters.map((title) => ({
  title,
  id: `#page_${title
    .toLowerCase()
    .replaceAll(" ", "")
    .replaceAll(/\/|[^a-zA-Z0-9]+/gm, "")}`,
}));

// const templates = (
//   await Astro.glob("../../assets/data/optimizer-state/ranger/*.json")
// ).map((d) => d.default);
const templates: any[] = [];
---

<script>
  class CharacterWithAr extends HTMLElement {
    private readonly pages: NodeListOf<Element>;
    private readonly buttons: NodeListOf<HTMLButtonElement>;

    constructor() {
      super();

      this.pages = this.querySelectorAll(".page");
      this.buttons = this.querySelectorAll("button[data-tab-ui]");

      this.initDesktop();
      this.initMobileSelect();
    }

    private initDesktop(): void {
      this.buttons.forEach((button) => {
        button.addEventListener("click", () => {
          const target = button.getAttribute("data-tab-ui");
          if (!target) return;

          const element = this.querySelector<HTMLElement>(target);
          if (!element) return;

          // hide page elements
          this.pages.forEach((page) => {
            if (page.id !== target.replace("#", "")) {
              page.classList.add("hidden");
            }
          });

          // show element
          element.classList.remove("hidden");

          this.buttons.forEach((btn) => {
            const btnTarget = btn.getAttribute("data-tab-ui");
            if (btnTarget === target) {
              btn.classList.add("btn-primary");
              btn.classList.remove("embossed");
            } else {
              btn.classList.remove("btn-primary");
              btn.classList.add("embossed");
            }
          });
        });
      });
    }

    private initMobileSelect(): void {
      const mobileCharacterSelect = this.querySelector<HTMLSelectElement>(
        "#mobileCharacterSelect",
      );

      if (mobileCharacterSelect) {
        mobileCharacterSelect.addEventListener("change", (event: Event) => {
          const target = (event.target as HTMLSelectElement).value;
          if (!target) return;

          const element = document.querySelector<HTMLElement>(target);
          if (!element) return;

          // hide page elements
          const pages = document.querySelectorAll<HTMLElement>(".page");
          pages.forEach((page) => {
            if (page.id !== target.replace("#", "")) {
              page.classList.add("hidden");
            }
          });

          // show element
          element.classList.remove("hidden");
        });
      }
    }
  }

  customElements.define("character-with-ar", CharacterWithAr);
</script>

<character-with-ar>
  <div id={id} class="">
    <div class="join hidden sm:block">
      {
        enrichedCharacters.map((character, index) => (
          <button
            data-tab-ui={character.id}
            aria-label={character.title}
            class:list={[
              "btn btn-sm join-item",
              { "btn-primary": index === 0, embossed: index !== 0 },
            ]}
          >
            {character.title}
          </button>
        ))
      }
    </div>
    <div class="form-control w-full max-w-xs sm:hidden">
      <label class="label">
        <span class="label-text">Pick a gear variant</span>
      </label>
      <select
        class="select select-bordered"
        id="mobileCharacterSelect"
        aria-label="Character Variant"
      >
        {
          enrichedCharacters.map((character, index) => (
            <option
              value={character.id}
              aria-label={character.title}
              selected={index === 0}
            >
              {character.title}
            </option>
          ))
        }
      </select>
    </div>

    <noscript>To display the character, please enable JavaScript :)</noscript>

    <slot />

    <div class="page hidden" id="peepoptimizer">
      <Peepoptimizer client:visible templates={templates} />
    </div>
  </div>
</character-with-ar>

<style>
  :global(.gw2item) {
    font-size: 60px;
    line-height: 0.9 !important;
  }
</style>
